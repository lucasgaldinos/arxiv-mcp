[project]
name = "arxiv-mcp-improved"
version = "0.2.2"
description = "An improved async MCP server to fetch and process ArXiv papers with parallel downloads and TeX generation."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "diskcache>=5.6.3",
    "markitdown[pdf]>=0.1.2",
    "mcp[cli]>=1.9.3",
    "httpx[http2]>=0.27.0",
    "aiolimiter>=1.1.0",
    "tenacity>=8.2.3",
    "aiofiles>=23.2.0",
    "python-magic>=0.4.27",
    "pyyaml>=6.0",
    "aiohttp>=3.8.0",
    "python-dotenv>=1.1.1",
    "pytest>=8.4.2",
    "iniconfig>=2.1.0",
    "pluggy>=1.6.0",
    "pypdf>=5.0.0",
    "beautifulsoup4>=4.13.5",
    "pydantic>=2.11.7",
    "fastmcp>=2.12.2",
]

[project.scripts]
arxiv-mcp-improved = "arxiv_mcp:main"

[project.optional-dependencies]
nlp = [
    "beautifulsoup4>=4.13.5",
    "nltk>=3.9.1",
    "spacy>=3.7.0",
    "textblob>=0.17.0",
]
visualization = [
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "networkx>=3.1.0",
]
advanced-parsing = [
    "lxml>=4.9.0",
    "pdfminer.six>=20231228",
    "python-docx>=1.1.0",
]
ml = [
    "scikit-learn>=1.3.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "coverage[toml]>=7.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.90.0",
    "freezegun>=1.2.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0",
    "pytest-benchmark>=4.0.0",
]
all = [
    "arxiv-mcp-improved[nlp,visualization,advanced-parsing,ml]",
]
network-analysis = [
    "networkx>=3.5",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/arxiv_mcp"]

[dependency-groups]
dev = [
    "autopep8>=2.3.2",
    "black>=25.1.0",
    "flake8>=7.3.0",
    "mypy>=1.17.1",
    "pylint>=3.3.8",
    "pytest-asyncio>=1.1.0",
    "coverage[toml]>=7.0.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.90.0",
    "freezegun>=1.2.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0",
    "pytest-benchmark>=4.0.0",
    "mcp>=1.13.1",
]

[tool.pytest.ini_options]
addopts = "-ra -v --tb=short --strict-markers --strict-config"
markers = [
    "integration: marks tests as integration tests",
    "asyncio: marks tests as async tests",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
    "smoke: marks tests as smoke tests",
    "performance: marks tests as performance tests",
]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "strict"
filterwarnings = [
    "error::DeprecationWarning:arxiv_mcp.*",
    "ignore::DeprecationWarning:pytest_asyncio.*",
    "ignore::PendingDeprecationWarning",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
minversion = "8.0"

[tool.coverage.run]
branch = true
source = ["src/arxiv_mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
fail_under = 85
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.html]
directory = ".dev/build/htmlcov"
